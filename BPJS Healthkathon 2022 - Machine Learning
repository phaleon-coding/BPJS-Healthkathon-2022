{"cells":[{"cell_type":"markdown","metadata":{"id":"1HtuDaT5X7Tv"},"source":["# Data Preparation"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10713,"status":"ok","timestamp":1664785170519,"user":{"displayName":"And rew","userId":"05916487664191867884"},"user_tz":-420},"id":"vA5GRXAnVVBm","outputId":"68ffc2ea-90f6-4227-8a37-e65ff4439dfe"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-10-03 08:19:18--  https://bafybeihnbhs3i3xilekqlih5beb27g6xizf6monfk34k2nch3thhyjwdla.ipfs.dweb.link/Healthkathon%202022%20-%20Machine%20Learning.rar\n","Resolving bafybeihnbhs3i3xilekqlih5beb27g6xizf6monfk34k2nch3thhyjwdla.ipfs.dweb.link (bafybeihnbhs3i3xilekqlih5beb27g6xizf6monfk34k2nch3thhyjwdla.ipfs.dweb.link)... 209.94.90.1, 2602:fea2:2::1\n","Connecting to bafybeihnbhs3i3xilekqlih5beb27g6xizf6monfk34k2nch3thhyjwdla.ipfs.dweb.link (bafybeihnbhs3i3xilekqlih5beb27g6xizf6monfk34k2nch3thhyjwdla.ipfs.dweb.link)|209.94.90.1|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 293794394 (280M) [application/vnd.rar]\n","Saving to: ‘Healthkathon 2022 - Machine Learning.rar’\n","\n","Healthkathon 2022 - 100%[===================>] 280.18M  28.2MB/s    in 8.9s    \n","\n","2022-10-03 08:19:27 (31.4 MB/s) - ‘Healthkathon 2022 - Machine Learning.rar’ saved [293794394/293794394]\n","\n"]}],"source":["!wget https://bafybeihnbhs3i3xilekqlih5beb27g6xizf6monfk34k2nch3thhyjwdla.ipfs.dweb.link/Healthkathon%202022%20-%20Machine%20Learning.rar"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4419,"status":"ok","timestamp":1664785174913,"user":{"displayName":"And rew","userId":"05916487664191867884"},"user_tz":-420},"id":"idw1BLKsZky4","outputId":"2a5445d1-091d-465d-bc2d-f84df77c6c45"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting unrar\n","  Downloading unrar-0.4-py3-none-any.whl (25 kB)\n","Installing collected packages: unrar\n","Successfully installed unrar-0.4\n"]}],"source":["!pip install unrar"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0BakIbPzZhEb","outputId":"bc86d078-5b55-460e-ebdb-1e0888531c4b","executionInfo":{"status":"ok","timestamp":1664785827767,"user_tz":-420,"elapsed":653436,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","UNRAR 5.50 freeware      Copyright (c) 1993-2017 Alexander Roshal\n","\n","\n","Extracting from /content/Healthkathon 2022 - Machine Learning.rar\n","\n","Enter password (will not be echoed) for sampling_healthkathon2022_diagnosa/sampling_healthkathon2022_diagnosa.csv: \n","\n","Creating    sampling_healthkathon2022_diagnosa                        OK\n","Extracting  sampling_healthkathon2022_diagnosa/sampling_healthkathon2022_diagnosa.csv     \b\b\b\b  0%\b\b\b\b  1%\b\b\b\b  2%\b\b\b\b  3%\b\b\b\b  4%\b\b\b\b  5%\b\b\b\b  6%\b\b\b\b  7%\b\b\b\b  8%\b\b\b\b  9%\b\b\b\b 10%\b\b\b\b 11%\b\b\b\b 12%\b\b\b\b 13%\b\b\b\b 14%\b\b\b\b 15%\b\b\b\b 16%\b\b\b\b 17%\b\b\b\b 18%\b\b\b\b 19%\b\b\b\b 20%\b\b\b\b 21%\b\b\b\b 22%\b\b\b\b 23%\b\b\b\b 24%\b\b\b\b 25%\b\b\b\b\b  OK \n","Creating    sampling_healthkathon2022_procedure                       OK\n","Extracting  sampling_healthkathon2022_procedure/sampling_healthkathon2022_procedure.csv     \b\b\b\b 25%\b\b\b\b 26%\b\b\b\b 27%\b\b\b\b 28%\b\b\b\b 29%\b\b\b\b 30%\b\b\b\b 31%\b\b\b\b 32%\b\b\b\b 33%\b\b\b\b 34%\b\b\b\b 35%\b\b\b\b 36%\b\b\b\b 37%\b\b\b\b 38%\b\b\b\b 39%\b\b\b\b 40%\b\b\b\b 41%\b\b\b\b\b  OK \n","Creating    sampling_healtkathon2022                                  OK\n","Extracting  sampling_healtkathon2022/sampling_healtkathon2022.csv        \b\b\b\b 41%\b\b\b\b 42%\b\b\b\b 43%\b\b\b\b 44%\b\b\b\b 45%\b\b\b\b 46%\b\b\b\b 47%\b\b\b\b 48%\b\b\b\b 49%\b\b\b\b 50%\b\b\b\b 51%\b\b\b\b 52%\b\b\b\b 53%\b\b\b\b 54%\b\b\b\b 55%\b\b\b\b 56%\b\b\b\b 57%\b\b\b\b 58%\b\b\b\b 59%\b\b\b\b 60%\b\b\b\b 61%\b\b\b\b 62%\b\b\b\b 63%\b\b\b\b 64%\b\b\b\b 65%\b\b\b\b 66%\b\b\b\b 67%\b\b\b\b 68%\b\b\b\b 69%\b\b\b\b 70%\b\b\b\b 71%\b\b\b\b 72%\b\b\b\b 73%\b\b\b\b 74%\b\b\b\b 75%\b\b\b\b 76%\b\b\b\b 77%\b\b\b\b 78%\b\b\b\b 79%\b\b\b\b 80%\b\b\b\b 81%\b\b\b\b 82%\b\b\b\b 83%\b\b\b\b 84%\b\b\b\b 85%\b\b\b\b 86%\b\b\b\b 87%\b\b\b\b 88%\b\b\b\b 89%\b\b\b\b 90%\b\b\b\b 91%\b\b\b\b 92%\b\b\b\b 93%\b\b\b\b 94%\b\b\b\b 95%\b\b\b\b 96%\b\b\b\b 97%\b\b\b\b 98%\b\b\b\b 99%\b\b\b\b\b  OK \n","All OK\n"]}],"source":["!unrar x \"/content/Healthkathon 2022 - Machine Learning.rar\""]},{"cell_type":"code","execution_count":1,"metadata":{"id":"ZG2RLq-FaeMU","executionInfo":{"status":"ok","timestamp":1664787974736,"user_tz":-420,"elapsed":12962,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"outputs":[],"source":["import numpy as np\n","np.random.seed(42)\n","import pandas as pd\n","import matplotlib as mpl\n","mpl.style.use(\"seaborn\")\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import imblearn\n","from sklearn.model_selection import train_test_split\n","from sklearn.utils.class_weight import compute_class_weight\n","import tensorflow as tf\n","%load_ext tensorboard\n","tf.keras.backend.clear_session()\n","tf.random.set_seed(42)"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"repNqYoxafUB","colab":{"base_uri":"https://localhost:8080/","height":473},"executionInfo":{"status":"ok","timestamp":1664788013445,"user_tz":-420,"elapsed":38734,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"outputId":"5e76ceb7-ed07-435c-944f-e762135a18a0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        id  id_peserta  dati2 typefaskes  usia jenkel  pisat  \\\n","0   165666         486     17         KL    48      P    1.0   \n","1  1010828         520     17          A    63      L    1.0   \n","2   166042         523     17         KL    53      P    1.0   \n","3   168937         549     17         KL    54      P    1.0   \n","4  1005899         549     17          A    53      P    1.0   \n","\n","                  tgldatang                 tglpulang  jenispel  ...  \\\n","0  2018-07-25T17:00:00.000Z  2018-07-25T17:00:00.000Z         2  ...   \n","1  2019-05-27T17:00:00.000Z  2019-05-30T17:00:00.000Z         1  ...   \n","2  2019-07-16T17:00:00.000Z  2019-07-16T17:00:00.000Z         2  ...   \n","3  2019-10-17T17:00:00.000Z  2019-10-17T17:00:00.000Z         2  ...   \n","4  2018-04-18T17:00:00.000Z  2018-04-18T17:00:00.000Z         2  ...   \n","\n","        biaya jenispulang         cbg  kelasrawat  kdsa  kdsp  kdsr  kdsi  \\\n","0    184300.0         1.0    Q-5-42-0           3  None  None  None  None   \n","1  10628400.0         1.0  D-4-13-III           1  None  None  None  None   \n","2    187300.0         1.0    Q-5-44-0           3  None  None  None  None   \n","3    187300.0         1.0    Q-5-44-0           3  None  None  None  None   \n","4    381600.0         1.0    Q-5-44-0           3  None  None  None  None   \n","\n","   kdsd label  \n","0  None     0  \n","1  None     0  \n","2  None     0  \n","3  None     0  \n","4  None     0  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-7fe7d192-ab4f-4ad2-befe-99c95701a8d6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>id_peserta</th>\n","      <th>dati2</th>\n","      <th>typefaskes</th>\n","      <th>usia</th>\n","      <th>jenkel</th>\n","      <th>pisat</th>\n","      <th>tgldatang</th>\n","      <th>tglpulang</th>\n","      <th>jenispel</th>\n","      <th>...</th>\n","      <th>biaya</th>\n","      <th>jenispulang</th>\n","      <th>cbg</th>\n","      <th>kelasrawat</th>\n","      <th>kdsa</th>\n","      <th>kdsp</th>\n","      <th>kdsr</th>\n","      <th>kdsi</th>\n","      <th>kdsd</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>165666</td>\n","      <td>486</td>\n","      <td>17</td>\n","      <td>KL</td>\n","      <td>48</td>\n","      <td>P</td>\n","      <td>1.0</td>\n","      <td>2018-07-25T17:00:00.000Z</td>\n","      <td>2018-07-25T17:00:00.000Z</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>184300.0</td>\n","      <td>1.0</td>\n","      <td>Q-5-42-0</td>\n","      <td>3</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1010828</td>\n","      <td>520</td>\n","      <td>17</td>\n","      <td>A</td>\n","      <td>63</td>\n","      <td>L</td>\n","      <td>1.0</td>\n","      <td>2019-05-27T17:00:00.000Z</td>\n","      <td>2019-05-30T17:00:00.000Z</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>10628400.0</td>\n","      <td>1.0</td>\n","      <td>D-4-13-III</td>\n","      <td>1</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>166042</td>\n","      <td>523</td>\n","      <td>17</td>\n","      <td>KL</td>\n","      <td>53</td>\n","      <td>P</td>\n","      <td>1.0</td>\n","      <td>2019-07-16T17:00:00.000Z</td>\n","      <td>2019-07-16T17:00:00.000Z</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>187300.0</td>\n","      <td>1.0</td>\n","      <td>Q-5-44-0</td>\n","      <td>3</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>168937</td>\n","      <td>549</td>\n","      <td>17</td>\n","      <td>KL</td>\n","      <td>54</td>\n","      <td>P</td>\n","      <td>1.0</td>\n","      <td>2019-10-17T17:00:00.000Z</td>\n","      <td>2019-10-17T17:00:00.000Z</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>187300.0</td>\n","      <td>1.0</td>\n","      <td>Q-5-44-0</td>\n","      <td>3</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1005899</td>\n","      <td>549</td>\n","      <td>17</td>\n","      <td>A</td>\n","      <td>53</td>\n","      <td>P</td>\n","      <td>1.0</td>\n","      <td>2018-04-18T17:00:00.000Z</td>\n","      <td>2018-04-18T17:00:00.000Z</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>381600.0</td>\n","      <td>1.0</td>\n","      <td>Q-5-44-0</td>\n","      <td>3</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>None</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fe7d192-ab4f-4ad2-befe-99c95701a8d6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7fe7d192-ab4f-4ad2-befe-99c95701a8d6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7fe7d192-ab4f-4ad2-befe-99c95701a8d6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}],"source":["df = pd.read_csv('/content/sampling_healtkathon2022/sampling_healtkathon2022.csv')\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"cxAC4dNMYBmj"},"source":["# Data Cleansing"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"x8K_-QM0VvCt","executionInfo":{"status":"ok","timestamp":1664788013448,"user_tz":-420,"elapsed":36,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"outputs":[],"source":["df = df[[\"pisat\", \"jenispel\", \"biaya\", \"jenispulang\", \"kelasrawat\", \"label\"]]"]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-NZHQYaHOo6h","executionInfo":{"status":"ok","timestamp":1664788013453,"user_tz":-420,"elapsed":38,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"outputId":"9b15ab99-0ac3-422e-a4c4-c33cfb825fc7"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 11401882 entries, 0 to 11401881\n","Data columns (total 6 columns):\n"," #   Column       Dtype  \n","---  ------       -----  \n"," 0   pisat        float64\n"," 1   jenispel     int64  \n"," 2   biaya        float64\n"," 3   jenispulang  float64\n"," 4   kelasrawat   int64  \n"," 5   label        int64  \n","dtypes: float64(3), int64(3)\n","memory usage: 521.9 MB\n"]}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PaGOdmN7O18W","executionInfo":{"status":"ok","timestamp":1664788013455,"user_tz":-420,"elapsed":35,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"outputId":"d9bac2df-4e82-4e7b-e2e5-b9f0250abbf8"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pisat            190\n","jenispel           0\n","biaya          57815\n","jenispulang       39\n","kelasrawat         0\n","label              0\n","dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df[\"biaya\"].fillna(value=0, inplace=True)"],"metadata":{"id":"K-DvcdRyPBg8","executionInfo":{"status":"ok","timestamp":1664788013456,"user_tz":-420,"elapsed":28,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["df.dropna(axis=0, how=\"any\", inplace=True)"],"metadata":{"id":"lI7_V-xLPmDw","executionInfo":{"status":"ok","timestamp":1664788014403,"user_tz":-420,"elapsed":975,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ss-rlehAYBwy"},"source":["# Exploratory Data Analysis"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"6APZU8Buj5Nx","executionInfo":{"status":"ok","timestamp":1664788015729,"user_tz":-420,"elapsed":1331,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"colab":{"base_uri":"https://localhost:8080/","height":654},"outputId":"31d8cf85-6bd5-4e21-8e00-d459c3ce3517"},"outputs":[{"output_type":"stream","name":"stdout","text":["label\n","0    11244764\n","1      156889\n","dtype: int64\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, (ax1, ax2)  = plt.subplots(nrows=1, ncols=2, figsize=(12,8))\n","\n","# Count Plot\n","print(df.value_counts(subset=\"label\", sort=False))\n","sns.countplot(x = \"label\", data = df, ax=ax1, palette=sns.color_palette(\"hls\", 8))\n","ax1.set_title(\"Count of each label\")\n","\n","# Pie Chart\n","labels = df[\"label\"].value_counts(sort=False).index\n","sizes = df[\"label\"].value_counts(sort=False).values\n","ax2.pie(sizes, startangle=0, autopct='%1.0f%%', pctdistance=0.8, colors = sns.color_palette(\"hls\", 8))\n","ax2.add_artist(plt.Circle((0,0),0.6, fc='white'))\n","ax2.set_title(\"Percentage of each label\")\n","ax2.legend(labels=labels, loc=\"upper left\")\n","\n","# Styling\n","plt.tight_layout()\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"0kggDFfcYFV0"},"source":["# Features Engineering"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"HGpjTnx8k5zS","executionInfo":{"status":"ok","timestamp":1664788017201,"user_tz":-420,"elapsed":1476,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"23afc1a1-6b4b-4ecf-d264-3fafd8276b90"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 0.5069760912723469, 1: 36.33668708449923}"]},"metadata":{},"execution_count":9}],"source":["label = df[\"label\"].value_counts(sort=False).index\n","weights = compute_class_weight(class_weight='balanced', classes = label, y = df[\"label\"])\n","class_weight = {}\n","\n","for i, emotion in enumerate(label):\n","  class_weight[i] = weights[i]\n","\n","class_weight"]},{"cell_type":"markdown","metadata":{"id":"Ly0mSx9cYGCm"},"source":["# Modelling"]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","train_df, test_df = train_test_split(df, test_size=0.2)\n","train_df, val_df = train_test_split(train_df, test_size=0.2)"],"metadata":{"id":"2y0CqCpSRcpc","executionInfo":{"status":"ok","timestamp":1664789213698,"user_tz":-420,"elapsed":7343,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["train_labels = np.array(train_df.pop('label'))\n","val_labels = np.array(val_df.pop('label'))\n","test_labels = np.array(test_df.pop('label'))\n","\n","train_features = np.array(train_df)\n","val_features = np.array(val_df)\n","test_features = np.array(test_df)"],"metadata":{"id":"O5lqe7TD8N2I","executionInfo":{"status":"ok","timestamp":1664789215286,"user_tz":-420,"elapsed":1606,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","train_features = scaler.fit_transform(train_features)\n","val_features = scaler.transform(val_features)\n","test_features = scaler.transform(test_features)\n","\n","train_features = np.clip(train_features, -5, 5)\n","val_features = np.clip(val_features, -5, 5)\n","test_features = np.clip(test_features, -5, 5)\n","\n","print('Training features shape:', train_features.shape)\n","print('Validation features shape:', val_features.shape)\n","print('Test features shape:', test_features.shape)\n","\n","print('Training labels shape:', train_labels.shape)\n","print('Validation labels shape:', val_labels.shape)\n","print('Test labels shape:', test_labels.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hwekhDhz8dou","executionInfo":{"status":"ok","timestamp":1664789215872,"user_tz":-420,"elapsed":592,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"outputId":"e78cedc2-ef10-401a-f6b2-45657706cb9e"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Training features shape: (7297057, 5)\n","Validation features shape: (1824265, 5)\n","Test features shape: (2280331, 5)\n","Training labels shape: (7297057,)\n","Validation labels shape: (1824265,)\n","Test labels shape: (2280331,)\n"]}]},{"cell_type":"code","source":["from imblearn.over_sampling import SMOTE\n","\n","oversample = SMOTE()\n","train_features, train_labels = oversample.fit_resample(train_features, train_labels)"],"metadata":{"id":"QkyMSjiOJD6p","executionInfo":{"status":"ok","timestamp":1664789321315,"user_tz":-420,"elapsed":20578,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"0AayszeP9TXq"}},{"cell_type":"code","source":["model = tf.keras.Sequential([tf.keras.layers.Dense(128, input_shape=(train_features.shape[-1],), activation='relu'),\n","                             tf.keras.layers.Dense(128, activation='relu'),\n","                             tf.keras.layers.Dense(256, activation='relu'),\n","                             tf.keras.layers.Dense(256, activation='relu'),\n","                             tf.keras.layers.Dense(1, activation='softmax')\n","                             ])\n","\n","model.compile(loss=tf.keras.losses.CategoricalCrossentropy(),\n","              optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3, epsilon=1),\n","              metrics=[tf.keras.metrics.CategoricalAccuracy(name='accuracy'),\n","                       tf.keras.metrics.Precision(name='precision'),\n","                       tf.keras.metrics.Recall(name='recall')])"],"metadata":{"id":"xY4M0dVVLjmT","executionInfo":{"status":"ok","timestamp":1664790513078,"user_tz":-420,"elapsed":496,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"blwDD85w-y57","executionInfo":{"status":"ok","timestamp":1664790516012,"user_tz":-420,"elapsed":677,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"outputId":"933a3e8b-4897-4bfa-ab9b-c3f02e6d1aec"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 128)               768       \n","                                                                 \n"," dense_1 (Dense)             (None, 128)               16512     \n","                                                                 \n"," dense_2 (Dense)             (None, 256)               33024     \n","                                                                 \n"," dense_3 (Dense)             (None, 256)               65792     \n","                                                                 \n"," dense_4 (Dense)             (None, 256)               65792     \n","                                                                 \n"," dense_5 (Dense)             (None, 256)               65792     \n","                                                                 \n"," dense_6 (Dense)             (None, 1)                 257       \n","                                                                 \n","=================================================================\n","Total params: 247,937\n","Trainable params: 247,937\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["num_epochs = 1000\n","batch_size = 100000\n","tf.keras.backend.clear_session()\n","\n","baseline = model.fit(x = train_features, y = train_labels,\n","                     validation_data=(val_features, val_labels),\n","                     batch_size = batch_size, verbose = 1, use_multiprocessing=True,\n","                     epochs = num_epochs, shuffle = True, class_weight = class_weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":523},"id":"zssvl_JhOBfN","executionInfo":{"status":"error","timestamp":1664791889523,"user_tz":-420,"elapsed":1372618,"user":{"displayName":"And rew","userId":"05916487664191867884"}},"outputId":"73f96a4a-e4a8-4997-8ca9-a82afc84f899"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/1000\n","144/144 [==============================] - 442s 3s/step - loss: 0.0000e+00 - accuracy: 1.0000 - precision: 0.5000 - recall: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000 - val_precision: 0.0137 - val_recall: 1.0000\n","Epoch 2/1000\n","144/144 [==============================] - 418s 3s/step - loss: 0.0000e+00 - accuracy: 1.0000 - precision: 0.5000 - recall: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000 - val_precision: 0.0137 - val_recall: 1.0000\n","Epoch 3/1000\n","144/144 [==============================] - 418s 3s/step - loss: 0.0000e+00 - accuracy: 1.0000 - precision: 0.5000 - recall: 1.0000 - val_loss: 0.0000e+00 - val_accuracy: 1.0000 - val_precision: 0.0137 - val_recall: 1.0000\n","Epoch 4/1000\n"," 30/144 [=====>........................] - ETA: 5:29 - loss: 0.0000e+00 - accuracy: 1.0000 - precision: 0.4999 - recall: 1.0000"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-495c222f51a3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m                      \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m                      \u001b[0mbatch_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m                      epochs = num_epochs, shuffle = True, class_weight = class_weight)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"68cI5_ZMYJCq"},"source":["# Evaluation"]},{"cell_type":"code","source":[],"metadata":{"id":"B7CxRLsaLj7o","executionInfo":{"status":"aborted","timestamp":1664788421440,"user_tz":-420,"elapsed":161,"user":{"displayName":"And rew","userId":"05916487664191867884"}}},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[],"authorship_tag":"ABX9TyNVCxqjyMEAVDwk6Za59xDQ"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}